// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/quadgod/email-service-go/internal/app/db/entity"
)

// MockEmailRepository is a mock of EmailRepository interface.
type MockEmailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailRepositoryMockRecorder
}

// MockEmailRepositoryMockRecorder is the mock recorder for MockEmailRepository.
type MockEmailRepositoryMockRecorder struct {
	mock *MockEmailRepository
}

// NewMockEmailRepository creates a new mock instance.
func NewMockEmailRepository(ctrl *gomock.Controller) *MockEmailRepository {
	mock := &MockEmailRepository{ctrl: ctrl}
	mock.recorder = &MockEmailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailRepository) EXPECT() *MockEmailRepositoryMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockEmailRepository) Commit(ctx context.Context, id string) (*entity.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, id)
	ret0, _ := ret[0].(*entity.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockEmailRepositoryMockRecorder) Commit(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockEmailRepository)(nil).Commit), ctx, id)
}

// Delete mocks base method.
func (m *MockEmailRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEmailRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmailRepository)(nil).Delete), ctx, id)
}

// GetForSend mocks base method.
func (m *MockEmailRepository) GetForSend(ctx context.Context) (*entity.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForSend", ctx)
	ret0, _ := ret[0].(*entity.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForSend indicates an expected call of GetForSend.
func (mr *MockEmailRepositoryMockRecorder) GetForSend(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForSend", reflect.TypeOf((*MockEmailRepository)(nil).GetForSend), ctx)
}

// GetTimeNow mocks base method.
func (m *MockEmailRepository) GetTimeNow() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeNow")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTimeNow indicates an expected call of GetTimeNow.
func (mr *MockEmailRepositoryMockRecorder) GetTimeNow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeNow", reflect.TypeOf((*MockEmailRepository)(nil).GetTimeNow))
}

// Insert mocks base method.
func (m *MockEmailRepository) Insert(ctx context.Context, email *entity.Email) (*entity.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, email)
	ret0, _ := ret[0].(*entity.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockEmailRepositoryMockRecorder) Insert(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockEmailRepository)(nil).Insert), ctx, email)
}

// MarkAsSent mocks base method.
func (m *MockEmailRepository) MarkAsSent(ctx context.Context, id string) (*entity.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsSent", ctx, id)
	ret0, _ := ret[0].(*entity.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsSent indicates an expected call of MarkAsSent.
func (mr *MockEmailRepositoryMockRecorder) MarkAsSent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsSent", reflect.TypeOf((*MockEmailRepository)(nil).MarkAsSent), ctx, id)
}

// Unlock mocks base method.
func (m *MockEmailRepository) Unlock(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlock indicates an expected call of Unlock.
func (mr *MockEmailRepositoryMockRecorder) Unlock(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockEmailRepository)(nil).Unlock), ctx)
}
